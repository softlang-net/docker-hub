server {
    listen       80;
    server_name  _;
    root         /usr/share/nginx/html;
    # Load configuration files for the default server block.
    error_page 404 /404.html;
    location = /404.html {
    }
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
    }
}
#resolver with docker dns=127.0.0.11:53
resolver 127.0.0.11 valid=30s ipv6=off;
resolver_timeout 10s;
proxy_read_timeout 300s;
server {
    listen 10081;
    # Define available domains and filling up subdomain variable 
    server_name ~^(?<subdomain>.+)\.domain\.com domain.com;
    # Set up content-type header
    add_header Content-Type text/plain;
    # Is subdomain is empty then show message without subdomain
    if ($subdomain = "") {
        return 200 "Welcome to domain.com";
    }
    # Otherwise 
    return 200 "Welcome to $subdomain.domain.com";
}
# Resolve hostname from request header field
# http://nginx.org/en/docs/varindex.html
# curl -H "app_host:api-srv1" -H "app_port=81" localhost:10082
server {
    listen 10082;
    server_name  _;
    default_type text/html;
    location /debug {
        return 200 "app=$http_app, $http_host, $host, ${server_port}, $scheme\n";
    }
    location / {
        proxy_set_header Host $http_host;
        # curl -H "app_host:api-srv1" -H "app_port=81" localhost:80
        proxy_pass $http_app_host$request_uri;
    }
}
#PCRE, for uri_prefix
server {
    listen 10083;
    server_name  _;
    default_type text/html;
    proxy_set_header Host $http_host;
    # my_api max is 64 characters
    location ~ "^/api/(?<my_api>([^/]{1,64}))" {
		return 200 'api is $my_api, url=$request_uri\n';
        #proxy_pass http://$my_api$request_uri;
	}

	location ~ "^/app/(?<my_app>([^/]{1,64}))" {
		return 200 'app is $my_app, url=$request_uri\n';
        #proxy_pass http://$my_app$request_uri;
	}

	location ~ ^/-(?<my_devops>([^/]+)) {
		return 200 'devops=$my_devops, url=$request_uri\n';
        #proxy_pass http://$my_devops$request_uri;
	}

	location ~ ^/(?<my_entry>([^/]+)) {
		return 200 'proxy_pass=$my_entry, url=$request_uri\n';
        #proxy_pass http://$my_entry$request_uri;
	}

    location /debug {
        return 200 'debug >> $request_uri';
    }
}